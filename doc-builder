#!/usr/bin/env bash

# Stop on any error!
set -e

IMAGE_NAME="simplyblock/mkdocs-builder"

DOCKER=$(command -v docker)
if ! [[ "${DOCKER}" ]]; then
  echo "Command docker not found. Please install docker."
  exit 1
fi

GREP=$(command -v grep)
if ! [[ "${GREP}" ]]; then
  echo "Command grep not found. Please install grep."
  exit 1
fi

JQ=$(command -v jq)
if ! [[ "${JQ}" ]]; then
  echo "Command jq not found. Please install jq."
  exit 1
fi

GIT=$(command -v git)
if ! [[ "${GIT}" ]]; then
  echo "Command git not found. Please install git."
  exit 1
fi

function ensure_docker_image() {
  echo -n "Checking docker build image... "
  local image=$(${DOCKER} image ls | ${GREP} ${IMAGE_NAME})
  if [[ "${image}" ]]; then
    echo "ok."
    return
  fi
  echo "failed. Please run ./doc-builder.sh build-image"
  exit 1
}

function update_repositories() {
  if [ ! -d ./scripts/sbcli-repo ]; then
    echo "Cloning sbcli repository..."
    git clone git@github.com:simplyblock-io/sbcli.git ./scripts/sbcli-repo
  else
    echo "Updating sbcli repository..."
    pushd ./scripts/sbcli-repo
    git reset --hard
    git pull -f
    local ret=$?
    popd
    exit ${ret}
  fi
}

function build_image() {
  docker build -t ${IMAGE_NAME} .
  exit $?
}

function serve() {
  ensure_docker_image
  ${DOCKER} run --rm -it -p 127.0.0.1:8000:8000 -v "${PWD}:/docs" ${IMAGE_NAME} serve --watch-theme -a 0.0.0.0:8000
  exit $?
}

function gen_sbcli_ref() {
  if [ ! -d ./scripts/sbcli-repo ]; then
    echo "The sbcli repository not yet available. Please run ./doc-builder update-sbcli and try again."
    exit 1
  fi

  echo "Generating sbcli reference pages..."
  ${DOCKER} run --rm ${terminal} -v "${PWD}":/docs --entrypoint="/usr/local/bin/python" ${IMAGE_NAME} /docs/scripts/cli-reference-gen.py /docs
}

function build() {
  ensure_docker_image
  echo -n "Cleaning site directory... "
  rm -rf ./site > /dev/null
  echo "ok."

  local terminal="-it"
  if [[ "${GITHUB_RUN_ID}" != "" ]]; then
    echo "Running in GitHub Actions, disabling interactive terminal..."
    terminal="-t"
  fi

  # Generates the markdown files for the sbcli reference pages
  if ! gen_sbcli_ref; then
    exit 1
  fi

  echo "Building documentation... "
  if ! ${DOCKER} run --rm ${terminal} -v "${PWD}:/docs" ${IMAGE_NAME} build --strict "$@"; then
    echo "Building documentation failed. Please see above for potential issues. After fixing them, you can retry."
    exit 1
  fi

  if [[ "${GITHUB_RUN_ID}" != "" ]]; then
    echo "Fixing file permissions after GitHub build..."
    sudo chown -R runner:docker ./site
  fi
}

function deploy() {
  local version="$1"
  if [[ "${version}" == "" ]]; then
    echo "Version missing. Please run as /doc-builder.sh build {version-name}"
    exit 1
  fi

  if [[ -d "./deployment/${version}" ]]; then
    echo "Version ${version} already exists."
    exit 1
  fi

  echo "Adjusting canonical url..."
  tempMkdocsYml="$(mktemp ./mkdocs.XXX)"
  sed -r "s|(site_url: .*)|\1${version}/|g" mkdocs.yml > "${tempMkdocsYml}"

  function cleanup() {
    rm "${tempMkdocsYml}"
  }
  trap cleanup EXIT

  if ! build --config-file "${tempMkdocsYml}" ; then
    exit 1
  fi

  echo -n "Prepare version for deployment..."
  mv "./site" "./deployment/${version}"

  if [ -d ./deployment/latest ]; then
    ${JQ} '.[].aliases=[]' ./deployment/latest/versions.json | ${JQ} --arg version "${version}" \
          '. |= [{"version":$version, "title":$version, "aliases":["latest"]}] + .' > ./deployment/versions-temp.json
    rm "./deployment/latest"
  else
    printf "[{\"version\":\"${version}\",\"title\":\"${version}\",\"aliases\":[\"latest\"]},{\"version\":\"dev\",\"title\":\"development\",\"aliases\":[]}]" | ${JQ} . > ./deployment/versions-temp.json
  fi

  ln -s "./${version}" "./deployment/latest"

  mv ./deployment/versions-temp.json ./deployment/latest/versions.json

  if [ ! -f ./deployment/versions.json ]; then
    ln -s ./latest/versions.json ./deployment/versions.json
  fi
  echo "ok."
}

case "$1" in
  "build-image")
    build_image
  ;;

  "serve")
    serve
  ;;

  "build")
    build
  ;;

  "deploy")
    deploy "${@:2}"
  ;;

  "update-repositories")
    update_repositories
  ;;

  "gen-sbcli-ref")
    gen_sbcli_ref
  ;;

  *)
    echo "Simplyblock Documentation Builder"
    echo "Available commands:"
    echo "  ./doc-builder build-image              Building required docker image"
    echo "  ./doc-builder update-repositories      Initialized or updated external repository"
    echo "  ./doc-builder gen-sbcli-ref            Generates the sbcli reference pages"
    echo "  ./doc-builder serve                    Live serving content changes"
    echo "  ./doc-builder build                    Building static documentation"
    echo "  ./doc-builder deploy {version-name}    Preparing new version deployment "
  ;;
esac

